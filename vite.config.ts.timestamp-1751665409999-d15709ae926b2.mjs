// vite.config.ts
import { vitePlugin as remix } from "file:///home/project/node_modules/@remix-run/dev/dist/index.js";
import { defineConfig, loadEnv } from "file:///home/project/node_modules/vite/dist/node/index.js";
import tsconfigPaths from "file:///home/project/node_modules/vite-tsconfig-paths/dist/index.mjs";
var vite_config_default = defineConfig(({ mode }) => {
  console.log("\u{1F527} Vite Config - Mode:", mode);
  const env = loadEnv(mode, process.cwd(), "");
  console.log("\u{1F527} Vite Config - Environment variables loaded:");
  console.log("- SUPABASE_URL:", env.SUPABASE_URL ? "\u2705 Set" : "\u274C Missing");
  console.log("- SUPABASE_ANON_KEY:", env.SUPABASE_ANON_KEY ? "\u2705 Set" : "\u274C Missing");
  console.log("- SUPABASE_SERVICE_ROLE_KEY:", env.SUPABASE_SERVICE_ROLE_KEY ? "\u2705 Set" : "\u274C Missing");
  return {
    plugins: [
      remix({
        future: {
          v3_fetcherPersist: true,
          v3_relativeSplatPath: true,
          v3_throwAbortReason: true
        }
      }),
      tsconfigPaths()
    ],
    define: {
      "process.env.SUPABASE_URL": JSON.stringify(env.SUPABASE_URL),
      "process.env.SUPABASE_ANON_KEY": JSON.stringify(env.SUPABASE_ANON_KEY),
      "process.env.SUPABASE_SERVICE_ROLE_KEY": JSON.stringify(env.SUPABASE_SERVICE_ROLE_KEY),
      "process.env.SESSION_SECRET": JSON.stringify(env.SESSION_SECRET)
    },
    envPrefix: ["VITE_", "SUPABASE_", "SESSION_"],
    css: {
      postcss: "./postcss.config.js",
      devSourcemap: true
    },
    server: {
      fs: {
        allow: [".."]
      }
    },
    build: {
      cssCodeSplit: false
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvaG9tZS9wcm9qZWN0XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvaG9tZS9wcm9qZWN0L3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9ob21lL3Byb2plY3Qvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyB2aXRlUGx1Z2luIGFzIHJlbWl4IH0gZnJvbSBcIkByZW1peC1ydW4vZGV2XCI7XG5pbXBvcnQgeyBkZWZpbmVDb25maWcsIGxvYWRFbnYgfSBmcm9tIFwidml0ZVwiO1xuaW1wb3J0IHRzY29uZmlnUGF0aHMgZnJvbSBcInZpdGUtdHNjb25maWctcGF0aHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKCh7IG1vZGUgfSkgPT4ge1xuICBjb25zb2xlLmxvZygnXHVEODNEXHVERDI3IFZpdGUgQ29uZmlnIC0gTW9kZTonLCBtb2RlKTtcbiAgXG4gIC8vIExvYWQgZW52IGZpbGUgYmFzZWQgb24gYG1vZGVgIGluIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5LlxuICBjb25zdCBlbnYgPSBsb2FkRW52KG1vZGUsIHByb2Nlc3MuY3dkKCksICcnKTtcbiAgXG4gIGNvbnNvbGUubG9nKCdcdUQ4M0RcdUREMjcgVml0ZSBDb25maWcgLSBFbnZpcm9ubWVudCB2YXJpYWJsZXMgbG9hZGVkOicpO1xuICBjb25zb2xlLmxvZygnLSBTVVBBQkFTRV9VUkw6JywgZW52LlNVUEFCQVNFX1VSTCA/ICdcdTI3MDUgU2V0JyA6ICdcdTI3NEMgTWlzc2luZycpO1xuICBjb25zb2xlLmxvZygnLSBTVVBBQkFTRV9BTk9OX0tFWTonLCBlbnYuU1VQQUJBU0VfQU5PTl9LRVkgPyAnXHUyNzA1IFNldCcgOiAnXHUyNzRDIE1pc3NpbmcnKTtcbiAgY29uc29sZS5sb2coJy0gU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWTonLCBlbnYuU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWSA/ICdcdTI3MDUgU2V0JyA6ICdcdTI3NEMgTWlzc2luZycpO1xuXG4gIHJldHVybiB7XG4gICAgcGx1Z2luczogW1xuICAgICAgcmVtaXgoe1xuICAgICAgICBmdXR1cmU6IHtcbiAgICAgICAgICB2M19mZXRjaGVyUGVyc2lzdDogdHJ1ZSxcbiAgICAgICAgICB2M19yZWxhdGl2ZVNwbGF0UGF0aDogdHJ1ZSxcbiAgICAgICAgICB2M190aHJvd0Fib3J0UmVhc29uOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgICB0c2NvbmZpZ1BhdGhzKCksXG4gICAgXSxcbiAgICBkZWZpbmU6IHtcbiAgICAgIFwicHJvY2Vzcy5lbnYuU1VQQUJBU0VfVVJMXCI6IEpTT04uc3RyaW5naWZ5KGVudi5TVVBBQkFTRV9VUkwpLFxuICAgICAgXCJwcm9jZXNzLmVudi5TVVBBQkFTRV9BTk9OX0tFWVwiOiBKU09OLnN0cmluZ2lmeShlbnYuU1VQQUJBU0VfQU5PTl9LRVkpLFxuICAgICAgXCJwcm9jZXNzLmVudi5TVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZXCI6IEpTT04uc3RyaW5naWZ5KGVudi5TVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZKSxcbiAgICAgIFwicHJvY2Vzcy5lbnYuU0VTU0lPTl9TRUNSRVRcIjogSlNPTi5zdHJpbmdpZnkoZW52LlNFU1NJT05fU0VDUkVUKSxcbiAgICB9LFxuICAgIGVudlByZWZpeDogWydWSVRFXycsICdTVVBBQkFTRV8nLCAnU0VTU0lPTl8nXSxcbiAgICBjc3M6IHtcbiAgICAgIHBvc3Rjc3M6ICcuL3Bvc3Rjc3MuY29uZmlnLmpzJyxcbiAgICAgIGRldlNvdXJjZW1hcDogdHJ1ZSxcbiAgICB9LFxuICAgIHNlcnZlcjoge1xuICAgICAgZnM6IHtcbiAgICAgICAgYWxsb3c6IFsnLi4nXVxuICAgICAgfVxuICAgIH0sXG4gICAgYnVpbGQ6IHtcbiAgICAgIGNzc0NvZGVTcGxpdDogZmFsc2UsXG4gICAgfVxuICB9O1xufSk7Il0sCiAgIm1hcHBpbmdzIjogIjtBQUF5TixTQUFTLGNBQWMsYUFBYTtBQUM3UCxTQUFTLGNBQWMsZUFBZTtBQUN0QyxPQUFPLG1CQUFtQjtBQUUxQixJQUFPLHNCQUFRLGFBQWEsQ0FBQyxFQUFFLEtBQUssTUFBTTtBQUN4QyxVQUFRLElBQUksaUNBQTBCLElBQUk7QUFHMUMsUUFBTSxNQUFNLFFBQVEsTUFBTSxRQUFRLElBQUksR0FBRyxFQUFFO0FBRTNDLFVBQVEsSUFBSSx1REFBZ0Q7QUFDNUQsVUFBUSxJQUFJLG1CQUFtQixJQUFJLGVBQWUsZUFBVSxnQkFBVztBQUN2RSxVQUFRLElBQUksd0JBQXdCLElBQUksb0JBQW9CLGVBQVUsZ0JBQVc7QUFDakYsVUFBUSxJQUFJLGdDQUFnQyxJQUFJLDRCQUE0QixlQUFVLGdCQUFXO0FBRWpHLFNBQU87QUFBQSxJQUNMLFNBQVM7QUFBQSxNQUNQLE1BQU07QUFBQSxRQUNKLFFBQVE7QUFBQSxVQUNOLG1CQUFtQjtBQUFBLFVBQ25CLHNCQUFzQjtBQUFBLFVBQ3RCLHFCQUFxQjtBQUFBLFFBQ3ZCO0FBQUEsTUFDRixDQUFDO0FBQUEsTUFDRCxjQUFjO0FBQUEsSUFDaEI7QUFBQSxJQUNBLFFBQVE7QUFBQSxNQUNOLDRCQUE0QixLQUFLLFVBQVUsSUFBSSxZQUFZO0FBQUEsTUFDM0QsaUNBQWlDLEtBQUssVUFBVSxJQUFJLGlCQUFpQjtBQUFBLE1BQ3JFLHlDQUF5QyxLQUFLLFVBQVUsSUFBSSx5QkFBeUI7QUFBQSxNQUNyRiw4QkFBOEIsS0FBSyxVQUFVLElBQUksY0FBYztBQUFBLElBQ2pFO0FBQUEsSUFDQSxXQUFXLENBQUMsU0FBUyxhQUFhLFVBQVU7QUFBQSxJQUM1QyxLQUFLO0FBQUEsTUFDSCxTQUFTO0FBQUEsTUFDVCxjQUFjO0FBQUEsSUFDaEI7QUFBQSxJQUNBLFFBQVE7QUFBQSxNQUNOLElBQUk7QUFBQSxRQUNGLE9BQU8sQ0FBQyxJQUFJO0FBQUEsTUFDZDtBQUFBLElBQ0Y7QUFBQSxJQUNBLE9BQU87QUFBQSxNQUNMLGNBQWM7QUFBQSxJQUNoQjtBQUFBLEVBQ0Y7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
